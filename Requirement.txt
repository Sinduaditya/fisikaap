LARAVEL BELAJAR FISIKA - FINAL REQUIREMENT
==========================================

AVAILABLE CONTROLLERS:
======================
1. AuthController (register, login, profile, logout)
2. SimulationController (getTopics, getTopicDetail, getTopicQuestions, getSimulationView, getQuestion, submitAnswer, getNextQuestion)

AVAILABLE MODELS & DATABASE STRUCTURE:
======================================

1. USERS TABLE
   Fields:
   - id (bigint, primary key)
   - name (varchar)
   - email (varchar, unique) 
   - email_verified_at (timestamp, nullable)
   - password (varchar)
   - avatar (varchar, nullable)
   - level (int, default 1)
   - total_xp (int, default 0)
   - streak_days (int, default 0)
   - last_activity_date (date, nullable)
   - remember_token (varchar, nullable)
   - created_at, updated_at (timestamps)
   
   Relationships:
   - achievements() -> hasMany(UserAchievement)
   - progress() -> hasMany(UserProgress)
   - attempts() -> hasMany(SimulationAttempt)

2. PHYSICS_TOPICS TABLE
   Fields:
   - id (bigint, primary key)
   - name (varchar) // Newton II, Energi Kinetik, Momentum
   - slug (varchar, unique) // hukum_newton, energi_kinetik, momentum, gaya-gesek
   - subtitle (varchar) // F = m × a, Ek = ½mv², p = m × v
   - description (text)
   - difficulty (enum: 'Beginner', 'Intermediate', 'Advanced')
   - estimated_duration (int) // dalam menit
   - icon (varchar, nullable)
   - is_active (boolean, default true)
   - order_index (int, default 0)
   - created_at, updated_at (timestamps)
   
   Relationships:
   - questions() -> hasMany(SimulationQuestion)
   - userProgress() -> hasMany(UserProgress)

3. SIMULATION_QUESTIONS TABLE
   Fields:
   - id (bigint, primary key)
   - physics_topic_id (foreign key -> physics_topics.id, cascade delete)
   - question_text (text)
   - simulation_type (varchar) // hukum_newton, energi_kinetik, momentum, gaya_gesek
   - parameters (json) // mass, velocity, friction, dll
   - evaluation_criteria (json) // target_variable, target_value, tolerance
   - hints (json, nullable) // Array of hints
   - max_score (int, default 100)
   - difficulty (enum: 'Beginner', 'Intermediate', 'Advanced')
   - is_active (boolean, default true)
   - created_at, updated_at (timestamps)
   
   Relationships:
   - topic() -> belongsTo(PhysicsTopic, 'physics_topic_id')
   - attempts() -> hasMany(SimulationAttempt)

4. USER_PROGRESS TABLE
   Fields:
   - id (bigint, primary key)
   - user_id (foreign key -> users.id, cascade delete)
   - physics_topic_id (foreign key -> physics_topics.id, cascade delete)
   - completed_questions (int, default 0)
   - total_questions (int)
   - total_score (int, default 0)
   - best_score (int, default 0)
   - first_attempt_at (timestamp, nullable)
   - last_attempt_at (timestamp, nullable)
   - is_completed (boolean, default false)
   - created_at, updated_at (timestamps)
   - UNIQUE constraint: (user_id, physics_topic_id)
   
   Relationships:
   - user() -> belongsTo(User)
   - topic() -> belongsTo(PhysicsTopic, 'physics_topic_id')

5. SIMULATION_ATTEMPTS TABLE
   Fields:
   - id (bigint, primary key)
   - user_id (foreign key -> users.id, cascade delete)
   - simulation_question_id (foreign key -> simulation_questions.id, cascade delete)
   - user_answer (json) // Applied force, calculated values, dll
   - correct_answer (json)
   - is_correct (boolean)
   - score_earned (int)
   - attempt_number (int)
   - time_taken (float, nullable) // dalam detik
   - simulation_data (json, nullable) // Data simulasi lengkap
   - created_at, updated_at (timestamps)
   
   Relationships:
   - user() -> belongsTo(User)
   - question() -> belongsTo(SimulationQuestion, 'simulation_question_id')

6. ACHIEVEMENTS TABLE
   Fields:
   - id (bigint, primary key)
   - name (varchar)
   - slug (varchar, unique)
   - description (text)
   - icon (varchar)
   - criteria (json) // Kondisi untuk unlock achievement
   - xp_reward (int)
   - rarity (enum: 'common', 'rare', 'epic', 'legendary')
   - is_active (boolean, default true)
   - created_at, updated_at (timestamps)
   
   Relationships:
   - userAchievements() -> hasMany(UserAchievement)

7. USER_ACHIEVEMENTS TABLE
   Fields:
   - id (bigint, primary key)
   - user_id (foreign key -> users.id, cascade delete)
   - achievement_id (foreign key -> achievements.id, cascade delete)
   - earned_at (timestamp)
   - created_at, updated_at (timestamps)
   - UNIQUE constraint: (user_id, achievement_id)
   
   Relationships:
   - user() -> belongsTo(User)
   - achievement() -> belongsTo(Achievement)

8. DAILY_CHALLENGES TABLE
   Fields:
   - id (bigint, primary key)
   - challenge_date (date)
   - simulation_question_id (foreign key -> simulation_questions.id, constrained)
   - xp_multiplier (int, default 2)
   - is_active (boolean, default true)
   - created_at, updated_at (timestamps)
   - UNIQUE constraint: challenge_date
   
   Relationships:
   - question() -> belongsTo(SimulationQuestion, 'simulation_question_id')

9. PERSONAL_ACCESS_TOKENS TABLE (Laravel Sanctum)
   Fields:
   - id (bigint, primary key)
   - tokenable_type (varchar)
   - tokenable_id (bigint)
   - name (text)
   - token (varchar 64, unique)
   - abilities (text, nullable)
   - last_used_at (timestamp, nullable)
   - expires_at (timestamp, nullable, indexed)
   - created_at, updated_at (timestamps)

10. CACHE TABLE (Laravel Cache)
    Fields:
    - key (varchar, primary key)
    - value (mediumtext)
    - expiration (int)

11. CACHE_LOCKS TABLE (Laravel Cache)
    Fields:
    - key (varchar, primary key)
    - owner (varchar)
    - expiration (int)

12. JOBS TABLE (Laravel Queue)
    Fields:
    - id (bigint, primary key)
    - queue (varchar, indexed)
    - payload (longtext)
    - attempts (tinyint unsigned)
    - reserved_at (int unsigned, nullable)
    - available_at (int unsigned)
    - created_at (int unsigned)

13. JOB_BATCHES TABLE (Laravel Queue)
    Fields:
    - id (varchar, primary key)
    - name (varchar)
    - total_jobs (int)
    - pending_jobs (int)
    - failed_jobs (int)
    - failed_job_ids (longtext)
    - options (mediumtext, nullable)
    - cancelled_at (int, nullable)
    - created_at (int)
    - finished_at (int, nullable)

14. FAILED_JOBS TABLE (Laravel Queue)
    Fields:
    - id (bigint, primary key)
    - uuid (varchar, unique)
    - connection (text)
    - queue (text)
    - payload (longtext)
    - exception (longtext)
    - failed_at (timestamp, default current)

AVAILABLE API ROUTES:
====================

PUBLIC ROUTES:
- GET /api/health
- POST /api/auth/register
- POST /api/auth/login

PROTECTED ROUTES (auth:sanctum):
- GET /api/auth/profile
- POST /api/auth/logout

**EXISTING SIMULATION ROUTES:**
- GET /api/simulation/topics

**NEW SIMULATION ROUTES (ADDED):**
- GET /api/simulation/topics/{topicSlug}
- GET /api/simulation/topics/{topicSlug}/questions
- GET /api/simulation/topics/{topicSlug}/simulation
- GET /api/simulation/questions/{questionId}
- POST /api/simulation/questions/{questionId}/submit
- GET /api/simulation/questions/{questionId}/next

- GET /api/user/
- GET /api/user/achievements
- GET /api/user/progress
- GET /api/user/attempts
- GET /api/user/progress/{topicSlug}

- GET /api/topics/
- GET /api/topics/{slug}
- GET /api/topics/{slug}/questions

- GET /api/achievements/

- GET /api/challenges/daily
- GET /api/challenges/

ENUM VALUES TO USE:
===================
- physics_topics.difficulty: ['Beginner', 'Intermediate', 'Advanced']
- simulation_questions.difficulty: ['Beginner', 'Intermediate', 'Advanced']
- achievements.rarity: ['common', 'rare', 'epic', 'legendary']

JSON FIELD STRUCTURES:
======================
- simulation_questions.parameters: {"mass": 20, "initial_velocity": 0, "friction_coefficient": 0.2}
- simulation_questions.evaluation_criteria: {"target_variable": "acceleration", "target_value": 2.5, "tolerance": 0.1}
- simulation_questions.hints: ["Consider Newton's second law", "F = ma"]
- simulation_attempts.user_answer: {"applied_force": 50, "calculated_acceleration": 2.5}
- simulation_attempts.correct_answer: {"force": 50, "acceleration": 2.5}
- simulation_attempts.simulation_data: {"final_velocity": 12.5, "distance_traveled": 31.25}
- achievements.criteria: {"type": "streak", "value": 7, "condition": ">="}

**===== NEW ADDED FEATURES =====**

SIMULATION ARCHITECTURE UPDATE:
===============================
1. **Backend Laravel**: Menyediakan API dan Blade views untuk simulasi
2. **Blade Views**: Matter.js simulation per topic (resources/views/simulations/{topic_slug}.blade.php)
3. **React Native**: WebView untuk menampilkan simulasi + native navigation

UPDATED SIMULATIONCONTROLLER METHODS:
====================================

**NEW METHODS ADDED:**
```php
// Get topic detail with simulation info
getTopicDetail($topicSlug)

// Get all questions for a topic (for React Native flow)
getTopicQuestions($topicSlug)

// Get simulation view HTML for WebView
getSimulationView($topicSlug)

// Get specific question with current progress
getQuestion($questionId)

// Get next question in the topic
getNextQuestion($questionId)

// Evaluate user answer against criteria (private)
evaluateAnswer($userAnswer, $criteria)

// Update user progress for topic (private)
updateUserProgress($user, $question, $evaluationResult)
```

**ENHANCED EXISTING METHODS:**
```php
// Enhanced getTopics() - returns simulation info
getTopics()

// Enhanced submitAnswer() - with evaluation and progress tracking
submitAnswer(Request $request, $questionId)
```

BLADE SIMULATION VIEWS STRUCTURE:
=================================
**Location**: resources/views/simulations/
**Required Files**:
- newton_second_law.blade.php
- kinetic_energy.blade.php  
- momentum.blade.php
- {physics_topics.slug}.blade.php

**Each simulation view must include**:
- Matter.js physics engine setup
- Interactive controls (sliders, buttons, inputs)
- Real-time physics calculations display
- WebView communication via postMessage
- Question parameter integration
- Answer collection mechanism
- Reset/restart functionality

WEBVIEW COMMUNICATION PROTOCOL:
==============================
**React Native -> WebView:**
```javascript
// Inject question data
window.postMessage(JSON.stringify({
  type: 'LOAD_QUESTION',
  question: questionData
}));
```

**WebView -> React Native:**
```javascript
// Submit answer
window.ReactNativeWebView.postMessage(JSON.stringify({
  type: 'SUBMIT_ANSWER',
  data: {
    user_answer: {...},
    simulation_data: {...},
    time_taken: 45.2
  }
}));
```

NEW API RESPONSE FORMATS:
========================

**Topic Detail with Simulation:**
```json
{
  "status": "success",
  "data": {
    "topic": {...},
    "questions_count": 5,
    "user_progress": {...},
    "simulation_view": "simulations.newton_second_law"
  }
}
```

**Question with Progress:**
```json
{
  "status": "success", 
  "data": {
    "question": {...},
    "attempt_number": 1,
    "simulation_view": "simulations.newton_second_law"
  }
}
```

**Next Question Response:**
```json
{
  "status": "success",
  "data": {
    "next_question": {...} | null,
    "topic_completed": false | true,
    "message": "Next question loaded" | "Topic completed!"
  }
}
```

**Enhanced Submit Answer Response:**
```json
{
  "status": "success",
  "data": {
    "attempt": {...},
    "is_correct": true,
    "score_earned": 95,
    "feedback": "Excellent! Well done!"
  }
}
```

SIMULATION FLOW LOGIC:
=====================
1. User memilih topic dari list topics
2. API getTopicDetail() mengembalikan topic info + simulation_view path
3. React Native load WebView dengan URL simulation/{topicSlug}
4. User menjalankan simulasi di WebView (Matter.js)
5. WebView communicate dengan React Native via postMessage
6. React Native kirim answer ke API submitAnswer()
7. API evaluate answer dan return feedback + progress update
8. Jika benar: call getNextQuestion() untuk auto progression
9. Jika salah: show feedback dan allow retry
10. Track progress hingga topic completion

QUESTION PROGRESSION SYSTEM:
===========================
- Questions diurutkan berdasarkan ID ascending
- User harus menjawab benar untuk lanjut ke question berikutnya
- Progress tracking per question dan per topic
- Topic completion ketika semua questions dijawab benar
- Retry system untuk questions yang salah

WEB ROUTES ADDITION (REQUIRED):
==============================
**Add to routes/web.php:**
```php
Route::get('simulation/{topicSlug}', function ($topicSlug) {
    $topic = \App\Models\PhysicsTopic::where('slug', $topicSlug)->firstOrFail();
    return view("simulations.{$topic->slug}", compact('topic'));
});
```

MATTER.JS SIMULATION REQUIREMENTS:
=================================
**Required Features per Simulation:**
- Physics engine setup dengan gravity/constraints yang sesuai
- Interactive elements (sliders untuk force, mass, velocity)
- Real-time calculations dan value display
- Visual feedback (object movement, collisions, trajectories)
- Question-specific parameter integration
- Answer collection via forms/inputs
- Reset/restart simulation functionality
- Progress indicators dan visual cues

**Example Implementations:**
1. **Newton Second Law**: Force slider, mass input, acceleration display
2. **Kinetic Energy**: Velocity controls, mass slider, energy calculations
3. **Momentum**: Multiple objects, collision scenarios, conservation demos

EVALUATION SYSTEM ENHANCEMENTS:
==============================
**Enhanced evaluation_criteria format:**
```json
{
  "target_variable": "acceleration",
  "target_value": 2.5,
  "tolerance": 0.1,
  "partial_credit": true,
  "time_bonus": {
    "max_time": 60,
    "bonus_points": 10
  }
}
```

**Scoring Algorithm:**
- Correct answer: 100 points base
- Within tolerance: Full score
- Outside tolerance: Graduated reduction
- Time bonus: Additional points for quick answers
- Attempt penalty: Reduction for multiple attempts

REACT NATIVE INTEGRATION REQUIREMENTS:
=====================================
**WebView Component Setup:**
1. Load simulation URL dalam WebView
2. Inject question data via injectedJavaScript
3. Listen for postMessage events dari simulation
4. Handle answer submission ke API
5. Show native feedback overlays
6. Progress tracking dan topic completion UI
7. Native navigation between questions
8. Error handling untuk WebView communication

FORBIDDEN ACTIONS:
==================
❌ DO NOT add fields that don't exist in migrations
❌ DO NOT add relationships that don't exist in models
❌ DO NOT add controller methods that don't exist
❌ DO NOT add complex calculations without model methods
❌ DO NOT add pagination without controller support
❌ DO NOT add statistics/performance routes without existing methods
❌ DO NOT add leaderboard without existing implementation
❌ DO NOT modify enum values in code (use migration values exactly)
❌ DO NOT add routes that reference non-existent controller methods
❌ DO NOT add joins or complex queries without proper relationships
❌ DO NOT use mock data, dummy data, or hardcoded fake data in responses
❌ DO NOT return static arrays or sample data instead of real database queries
❌ **DO NOT modify existing database structure or API behavior**
❌ **DO NOT change existing routes or method signatures**

REQUIRED ACTIONS:
=================
✅ ALWAYS use exact field names from migrations
✅ ALWAYS use exact enum values from migrations
✅ ALWAYS respect foreign key constraints
✅ ALWAYS use defined relationships in models
✅ ALWAYS follow existing controller method signatures
✅ ALWAYS return consistent JSON response format
✅ ALWAYS validate required fields before database operations
✅ ALWAYS query real data from database using proper Eloquent models
✅ ALWAYS use actual database relationships and models for data retrieval
✅ **ENHANCE existing methods instead of replacing them**
✅ **ADD new methods to existing controllers**
✅ **CREATE new blade views for simulations**
✅ **IMPLEMENT WebView communication properly**

IMPLEMENTATION PRIORITY ORDER:
=============================
1. **Phase 1**: SimulationController sudah complete dengan new methods
2. **Phase 2**: Create basic Blade simulation templates dengan Matter.js
3. **Phase 3**: Test all new API endpoints
4. **Phase 4**: Implement WebView integration di React Native
5. **Phase 5**: Add WebView communication protocol
6. **Phase 6**: Implement question progression logic
7. **Phase 7**: Add progress tracking enhancements
8. **Phase 8**: Polish UI/UX dan error handling

FOREIGN KEY RELATIONSHIPS:
===========================
- user_progress.user_id -> users.id (cascade delete)
- user_progress.physics_topic_id -> physics_topics.id (cascade delete)
- simulation_questions.physics_topic_id -> physics_topics.id (cascade delete)
- simulation_attempts.user_id -> users.id (cascade delete)
- simulation_attempts.simulation_question_id -> simulation_questions.id (cascade delete)
- user_achievements.user_id -> users.id (cascade delete)
- user_achievements.achievement_id -> achievements.id (cascade delete)
- daily_challenges.simulation_question_id -> simulation_questions.id (constrained)

UNIQUE CONSTRAINTS:
===================
- users.email
- physics_topics.slug
- achievements.slug
- user_progress.(user_id, physics_topic_id)
- user_achievements.(user_id, achievement_id)
- daily_challenges.challenge_date
- personal_access_tokens.token

ALWAYS REFERENCE THIS FILE BEFORE:
==================================
- Creating new routes
- Adding model relationships
- Adding controller methods
- Modifying existing functionality
- Adding new features
- Writing seeders
- Creating API responses
- Implementing WebView features
- Creating Matter.js simulations

**LAST UPDATED**: 2025-10-05  
**TOTAL TABLES**: 14 (8 application tables + 6 Laravel system tables)  
**NEW FEATURES**: Matter.js Simulations, WebView Integration, Enhanced Question Flow, Auto Progression  
**VERSION**: 2.0 (Complete Simulation System)  
**STATUS**: SimulationController Complete, Blade Views Required, WebView Integration Pending